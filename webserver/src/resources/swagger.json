{
  "swagger": "2.0",
  "info": {
    "description": "RideBooking Server API Documentation",
    "version": "1.0.5",
    "title": "Swagger RideBooking",
    "contact": {
      "email": "rohit.911.chauhan@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1/",
  "tags": [
    {
      "name": "rider",
      "description": "Everything about Riders/Customers"
    },
    {
      "name": "driver",
      "description": "Everything about Drivers"
    },
    {
      "name": "location",
      "description": "Locations serviceable"
    },
    {
      "name": "booking",
      "description": "Booking related details"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/driver/add": {
      "post": {
        "tags": [
          "driver"
        ],
        "summary": "Add a Driver",
        "description": "Add/Register a new Driver",
        "operationId": "addDriver",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Driver object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Driver"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/driver/update": {
      "put": {
        "tags": [
          "driver"
        ],
        "summary": "Update an existing Driver",
        "description": "",
        "operationId": "updateDriver",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Driver object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Driver"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Driver not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/driver/get": {
      "get": {
        "tags": [
          "driver"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "query object to search for Driver",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DriverQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Driver"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Driver not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/rider/add": {
      "post": {
        "tags": [
          "rider"
        ],
        "summary": "Add a Rider/Cutomer",
        "description": "Add/Register a new Rider/Customer",
        "operationId": "addRider",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Rider/Customer object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rider"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/rider/update": {
      "put": {
        "tags": [
          "rider"
        ],
        "summary": "Update an existing Rider/Cutomer",
        "description": "",
        "operationId": "updateRider",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Rider/Cutomer object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rider"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Rider not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/rider/get": {
      "get": {
        "tags": [
          "rider"
        ],
        "summary": "Find Rider/Cutomer by Query",
        "description": "Returns a single Rider/Cutomer",
        "operationId": "getRiderByQuery",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "query object to search for Rider/Cutomer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RiderQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Rider"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Rider/Cutomer not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/location/add": {
      "post": {
        "tags": [
          "location"
        ],
        "summary": "Add a Location",
        "description": "Add a new serviceable Location",
        "operationId": "addLocation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Location object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/location/update": {
      "put": {
        "tags": [
          "location"
        ],
        "summary": "Update an existing Location",
        "description": "",
        "operationId": "updateLocation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Location object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Location not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/booking/get": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Find booking by ID",
        "description": "Returns a single booking",
        "operationId": "getBookingById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "query",
            "description": "Booking ID to get the details",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Booking not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Driver": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "mobileNumber",
        "ride",
        "location",
        "status",
        "rating"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mobileNumber": {
          "type": "string"
        },
        "ride": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "rating": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "available",
            "break",
            "offline"
          ]
        }
      }
    },
    "Rider": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "mobileNumber",
        "rating",
        "location",
        "status"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mobileNumber": {
          "type": "string"
        },
        "rating": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "available",
            "break",
            "offline"
          ]
        }
      }
    },
    "Ride":{
      "type": "object",
      "required": [
        "plateNumber",
        "type",
        "location",
        "status",
        "brand"
      ],
      "properties": {
        "plateNumber" : {
          "type": "string"
        },
        "type":{
          "type": "string",
          "enum": [
            "prime",
            "regular",
            "mini",
            "business",
            "share"
          ]
        },
        "location":{
          "type": "string"
        },
        "status":{
          "type": "string"
        },
        "brand":{
          "type": "string"
        }
      }
    },
    "Booking":{
      "type": "object",
      "required": [
        "id",
        "type",
        "ride",
        "location",
        "status",
        "rider",
        "driver",
        "bookingDate",
        "startLocation",
        "destinationLocation"
      ],
      "properties": {
        "plateNumber" : {
          "type": "string"
        },
        "type":{
          "type": "string",
          "enum": [
            "prime",
            "regular",
            "mini",
            "business",
            "share"
          ]
        },
        "ride":{
          "type": "string"
        },
        "location":{
          "type": "string"
        },
        "status":{
          "type": "string"
        },
        "rider":{
          "type": "string"
        },
        "driver":{
          "type": "string"
        },
        "bookingDate":{
          "type": "string",
          "format": "date-time"
        },
        "startLocation":{
          "schema": {
            "$ref": "#/definitions/Location"
          }
        },
        "destinationLocation":{
          "schema": {
            "$ref": "#/definitions/Location"
          }
        }
      }
    },
    "Location" : {
      "type": "object",
      "required": [
        "long",
        "latt",
        "city",
        "state",
        "country"
      ],
      "properties": {
        "long" : {
          "type" : "string"
        },
        "latt":{
          "type": "string"
        },
        "city":{
          "type": "string"
        },
        "state":{
          "type": "string"
        },
        "country":{
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}